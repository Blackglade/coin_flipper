import algosdk from "algosdk";
import * as bkr from "beaker-ts";
export class BetResult {
    won: boolean = false;
    amount: bigint = BigInt(0);
    static codec: algosdk.ABIType = algosdk.ABIType.from("(bool,uint64)");
    static fields: string[] = ["won", "amount"];
    static decodeResult(val: algosdk.ABIValue | undefined): BetResult {
        return bkr.decodeNamedTuple(val, BetResult.fields) as BetResult;
    }
    static decodeBytes(val: Uint8Array): BetResult {
        return bkr.decodeNamedTuple(BetResult.codec.decode(val), BetResult.fields) as BetResult;
    }
}
export class CoinFlipper extends bkr.ApplicationClient {
    desc: string = "";
    override appSchema: bkr.Schema = { declared: { beacon_app_id: { type: bkr.AVMType.uint64, key: "beacon_app_id", desc: "", static: false }, min_bet: { type: bkr.AVMType.uint64, key: "min_bet", desc: "", static: false }, max_bet: { type: bkr.AVMType.uint64, key: "max_bet", desc: "", static: false }, bets_outstanding: { type: bkr.AVMType.uint64, key: "bets_outstanding", desc: "", static: false } }, reserved: {} };
    override acctSchema: bkr.Schema = { declared: { commitment_round: { type: bkr.AVMType.uint64, key: "commitment_round", desc: "", static: false }, bet: { type: bkr.AVMType.uint64, key: "bet", desc: "", static: false }, heads: { type: bkr.AVMType.uint64, key: "heads", desc: "", static: false } }, reserved: {} };
    override approvalProgram: string = "";
    override clearProgram: string = "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDEKYnl0ZWNibG9jayAweDYyNjU3NDczNWY2Zjc1NzQ3Mzc0NjE2ZTY0Njk2ZTY3CmNhbGxzdWIgY2xlYXJzdGF0ZV8wCmludGNfMCAvLyAxCnJldHVybgoKLy8gY2xlYXJfc3RhdGUKY2xlYXJzdGF0ZV8wOgpwcm90byAwIDAKdHhuIFNlbmRlcgpwdXNoYnl0ZXMgMHg2MzZmNmQ2ZDY5NzQ2ZDY1NmU3NDVmNzI2Zjc1NmU2NCAvLyAiY29tbWl0bWVudF9yb3VuZCIKYXBwX2xvY2FsX2dldApwdXNoaW50IDAgLy8gMAo+CmJ6IGNsZWFyc3RhdGVfMF9sMgpieXRlY18wIC8vICJiZXRzX291dHN0YW5kaW5nIgpieXRlY18wIC8vICJiZXRzX291dHN0YW5kaW5nIgphcHBfZ2xvYmFsX2dldAppbnRjXzAgLy8gMQotCmFwcF9nbG9iYWxfcHV0CmNsZWFyc3RhdGVfMF9sMjoKaW50Y18wIC8vIDEKcmV0dXJu";
    override methods: algosdk.ABIMethod[] = [
        new algosdk.ABIMethod({ name: "flip_coin", desc: "", args: [{ type: "pay", name: "bet_payment", desc: "" }, { type: "bool", name: "heads", desc: "" }], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "settle", desc: "", args: [{ type: "account", name: "bettor", desc: "" }, { type: "application", name: "beacon_app", desc: "" }], returns: { type: "(bool,uint64)", desc: "" } }),
        new algosdk.ABIMethod({ name: "configure", desc: "", args: [{ type: "uint64", name: "app_id", desc: "" }, { type: "uint64", name: "min_bet", desc: "" }, { type: "uint64", name: "max_bet", desc: "" }], returns: { type: "void", desc: "" } })
    ];
    async flip_coin(args: {
        bet_payment: algosdk.TransactionWithSigner | algosdk.Transaction;
        heads: boolean;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.flip_coin({ bet_payment: args.bet_payment, heads: args.heads }, txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async settle(args: {
        bettor: string;
        beacon_app?: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<BetResult>> {
        const result = await this.execute(await this.compose.settle({ bettor: args.bettor, beacon_app: args.beacon_app === undefined ? await this._resolve("global-state", "beacon_app_id") as bigint : args.beacon_app }, txnParams));
        return new bkr.ABIResult<BetResult>(result, BetResult.decodeResult(result.returnValue));
    }
    async configure(args: {
        app_id: bigint;
        min_bet: bigint;
        max_bet: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.configure({ app_id: args.app_id, min_bet: args.min_bet, max_bet: args.max_bet }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    compose = {
        flip_coin: async (args: {
            bet_payment: algosdk.TransactionWithSigner | algosdk.Transaction;
            heads: boolean;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "flip_coin"), { bet_payment: args.bet_payment, heads: args.heads }, txnParams, atc);
        },
        settle: async (args: {
            bettor: string;
            beacon_app?: bigint;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "settle"), { bettor: args.bettor, beacon_app: args.beacon_app === undefined ? await this._resolve("global-state", "beacon_app_id") : args.beacon_app }, txnParams, atc);
        },
        configure: async (args: {
            app_id: bigint;
            min_bet: bigint;
            max_bet: bigint;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "configure"), { app_id: args.app_id, min_bet: args.min_bet, max_bet: args.max_bet }, txnParams, atc);
        }
    };
}
