{
    "hints": {
        "settle": {
            "default_arguments": {
                "beacon_app": {
                    "source": "global-state",
                    "data": "beacon_app_id"
                }
            },
            "structs": {
                "output": {
                    "name": "BetResult",
                    "elements": [
                        [
                            "won",
                            "bool"
                        ],
                        [
                            "amount",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSAyCmJ5dGVjYmxvY2sgMHg2MjY1NzQ3MzVmNmY3NTc0NzM3NDYxNmU2NDY5NmU2NyAweCAweDYzNmY2ZDZkNjk3NDZkNjU2ZTc0NWY3MjZmNzU2ZTY0IDB4NjI2NTc0IDB4NjI2NTYxNjM2ZjZlNWY2MTcwNzA1ZjY5NjQgMHg2ZDY5NmU1ZjYyNjU3NCAweDZkNjE3ODVmNjI2NTc0IDB4Njg2NTYxNjQ3MyAweDE1MWY3Yzc1IDB4MDAKdHhuIE51bUFwcEFyZ3MKaW50Y18wIC8vIDAKPT0KYm56IG1haW5fbDgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg3MzMwZWU4YSAvLyAiZmxpcF9jb2luKHBheSxib29sKXVpbnQ2NCIKPT0KYm56IG1haW5fbDcKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg5ODJmYThlNSAvLyAic2V0dGxlKGFjY291bnQsYXBwbGljYXRpb24pKGJvb2wsdWludDY0KSIKPT0KYm56IG1haW5fbDYKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgzNTJkMGYxMiAvLyAiY29uZmlndXJlKHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQiCj09CmJueiBtYWluX2w1CmVycgptYWluX2w1Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKc3RvcmUgNgp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmJ0b2kKc3RvcmUgNwp0eG5hIEFwcGxpY2F0aW9uQXJncyAzCmJ0b2kKc3RvcmUgOApsb2FkIDYKbG9hZCA3CmxvYWQgOApjYWxsc3ViIGNvbmZpZ3VyZV8xMgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNjoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApnZXRieXRlCnN0b3JlIDMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgppbnRjXzAgLy8gMApnZXRieXRlCnN0b3JlIDQKbG9hZCAzCmxvYWQgNApjYWxsc3ViIHNldHRsZV85CnN0b3JlIDUKYnl0ZWMgOCAvLyAweDE1MWY3Yzc1CmxvYWQgNQpjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2w3Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmludGNfMCAvLyAwCnB1c2hpbnQgOCAvLyA4CioKZ2V0Yml0CnN0b3JlIDEKdHhuIEdyb3VwSW5kZXgKaW50Y18xIC8vIDEKLQpzdG9yZSAwCmxvYWQgMApndHhucyBUeXBlRW51bQppbnRjXzEgLy8gcGF5Cj09CmFzc2VydApsb2FkIDAKbG9hZCAxCmNhbGxzdWIgZmxpcGNvaW5fOApzdG9yZSAyCmJ5dGVjIDggLy8gMHgxNTFmN2M3NQpsb2FkIDIKaXRvYgpjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2w4Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CmJueiBtYWluX2wxOAp0eG4gT25Db21wbGV0aW9uCmludGNfMSAvLyBPcHRJbgo9PQpibnogbWFpbl9sMTcKdHhuIE9uQ29tcGxldGlvbgppbnRjXzIgLy8gQ2xvc2VPdXQKPT0KYm56IG1haW5fbDE2CnR4biBPbkNvbXBsZXRpb24KcHVzaGludCA0IC8vIFVwZGF0ZUFwcGxpY2F0aW9uCj09CmJueiBtYWluX2wxNQp0eG4gT25Db21wbGV0aW9uCnB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgo9PQpibnogbWFpbl9sMTQKZXJyCm1haW5fbDE0Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiBkZWxldGVfMwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTU6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIHVwZGF0ZV81CmludGNfMSAvLyAxCnJldHVybgptYWluX2wxNjoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KYXNzZXJ0CmNhbGxzdWIgY2xvc2VvdXRfNwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTc6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIG9wdGluXzYKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE4Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKY2FsbHN1YiBjcmVhdGVfMAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGNyZWF0ZQpjcmVhdGVfMDoKcHJvdG8gMCAwCmJ5dGVjIDQgLy8gImJlYWNvbl9hcHBfaWQiCnB1c2hpbnQgMTEwMDk2MDI2IC8vIDExMDA5NjAyNgphcHBfZ2xvYmFsX3B1dApieXRlYyA1IC8vICJtaW5fYmV0IgpwdXNoaW50IDUwMDAgLy8gNTAwMAphcHBfZ2xvYmFsX3B1dApieXRlYyA2IC8vICJtYXhfYmV0IgpwdXNoaW50IDEwMDAwMDAgLy8gMTAwMDAwMAphcHBfZ2xvYmFsX3B1dApieXRlY18wIC8vICJiZXRzX291dHN0YW5kaW5nIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIGF1dGhfb25seQphdXRob25seV8xOgpwcm90byAxIDEKZnJhbWVfZGlnIC0xCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQpyZXRzdWIKCi8vIGF1dGhfb25seQphdXRob25seV8yOgpwcm90byAxIDEKZnJhbWVfZGlnIC0xCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQpyZXRzdWIKCi8vIGRlbGV0ZQpkZWxldGVfMzoKcHJvdG8gMCAwCnR4biBTZW5kZXIKY2FsbHN1YiBhdXRob25seV8yCi8vIHVuYXV0aG9yaXplZAphc3NlcnQKYnl0ZWNfMCAvLyAiYmV0c19vdXRzdGFuZGluZyIKYXBwX2dsb2JhbF9nZXQKaW50Y18wIC8vIDAKPT0KYXNzZXJ0Cml0eG5fYmVnaW4KaW50Y18xIC8vIHBheQppdHhuX2ZpZWxkIFR5cGVFbnVtCnR4biBTZW5kZXIKaXR4bl9maWVsZCBSZWNlaXZlcgppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEFtb3VudAp0eG4gU2VuZGVyCml0eG5fZmllbGQgQ2xvc2VSZW1haW5kZXJUbwppdHhuX3N1Ym1pdAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGF1dGhfb25seQphdXRob25seV80Ogpwcm90byAxIDEKZnJhbWVfZGlnIC0xCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQpyZXRzdWIKCi8vIHVwZGF0ZQp1cGRhdGVfNToKcHJvdG8gMCAwCnR4biBTZW5kZXIKY2FsbHN1YiBhdXRob25seV80Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBvcHRfaW4Kb3B0aW5fNjoKcHJvdG8gMCAwCmludGNfMSAvLyAxCnJldHVybgoKLy8gY2xvc2Vfb3V0CmNsb3Nlb3V0Xzc6CnByb3RvIDAgMAp0eG4gU2VuZGVyCmJ5dGVjXzIgLy8gImNvbW1pdG1lbnRfcm91bmQiCmFwcF9sb2NhbF9nZXQKaW50Y18wIC8vIDAKPgpieiBjbG9zZW91dF83X2wyCmJ5dGVjXzAgLy8gImJldHNfb3V0c3RhbmRpbmciCmJ5dGVjXzAgLy8gImJldHNfb3V0c3RhbmRpbmciCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCi0KYXBwX2dsb2JhbF9wdXQKY2xvc2VvdXRfN19sMjoKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBmbGlwX2NvaW4KZmxpcGNvaW5fODoKcHJvdG8gMiAxCmludGNfMCAvLyAwCmZyYW1lX2RpZyAtMgpndHhucyBBbW91bnQKYnl0ZWMgNSAvLyAibWluX2JldCIKYXBwX2dsb2JhbF9nZXQKPj0KLy8gcGF5bWVudCBtdXN0IGJlID49IDVtQSBhbmQgPCAxQQphc3NlcnQKZnJhbWVfZGlnIC0yCmd0eG5zIEFtb3VudApieXRlYyA2IC8vICJtYXhfYmV0IgphcHBfZ2xvYmFsX2dldAo8PQovLyBwYXltZW50IG11c3QgYmUgPj0gNW1BIGFuZCA8IDFBCmFzc2VydApmcmFtZV9kaWcgLTIKZ3R4bnMgUmVjZWl2ZXIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKPT0KLy8gcGF5bWVudCBtdXN0IHRvIHRoZSBjb250cmFjdCBhZGRyZXNzCmFzc2VydAp0eG4gU2VuZGVyCmludGNfMCAvLyAwCmJ5dGVjXzIgLy8gImNvbW1pdG1lbnRfcm91bmQiCmFwcF9sb2NhbF9nZXRfZXgKc3RvcmUgMTAKc3RvcmUgOQpsb2FkIDEwCiEKLy8gdGhlcmUgaXMgYWxyZWFkeSBhIGJldCBvdXRzdGFuZGluZwphc3NlcnQKZ2xvYmFsIFJvdW5kCnB1c2hpbnQgMyAvLyAzCisKc3RvcmUgMTEKdHhuIFNlbmRlcgpieXRlY18yIC8vICJjb21taXRtZW50X3JvdW5kIgpsb2FkIDExCmFwcF9sb2NhbF9wdXQKdHhuIFNlbmRlcgpieXRlY18zIC8vICJiZXQiCmZyYW1lX2RpZyAtMgpndHhucyBBbW91bnQKYXBwX2xvY2FsX3B1dAp0eG4gU2VuZGVyCmJ5dGVjIDcgLy8gImhlYWRzIgpmcmFtZV9kaWcgLTEKYXBwX2xvY2FsX3B1dApieXRlY18wIC8vICJiZXRzX291dHN0YW5kaW5nIgpieXRlY18wIC8vICJiZXRzX291dHN0YW5kaW5nIgphcHBfZ2xvYmFsX2dldAppbnRjXzEgLy8gMQorCmFwcF9nbG9iYWxfcHV0CmxvYWQgMTEKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gc2V0dGxlCnNldHRsZV85Ogpwcm90byAyIDEKYnl0ZWNfMSAvLyAiIgppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMSAvLyAiIgppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMSAvLyAiIgpkdXAKaW50Y18wIC8vIDAKZHVwCmJ5dGVjXzEgLy8gIiIKZHVwCmZyYW1lX2RpZyAtMgp0eG5hcyBBY2NvdW50cwpieXRlY18yIC8vICJjb21taXRtZW50X3JvdW5kIgphcHBfbG9jYWxfZ2V0CmNhbGxzdWIgZ2V0cmFuZG9tbmVzc18xMQpmcmFtZV9idXJ5IDMKdHhuIFNlbmRlcgpieXRlYyA3IC8vICJoZWFkcyIKYXBwX2xvY2FsX2dldApmcmFtZV9kaWcgMwpleHRyYWN0IDIgMAppbnRjXzAgLy8gMApnZXRiaXQKPT0KIQohCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpibnogc2V0dGxlXzlfbDIKZnJhbWVfZGlnIC0yCnR4bmFzIEFjY291bnRzCmJ5dGVjXzMgLy8gImJldCIKYXBwX2xvY2FsX2dldApmcmFtZV9idXJ5IDIKYnl0ZWMgOSAvLyAweDAwCmludGNfMCAvLyAwCmZyYW1lX2RpZyAxCnNldGJpdApmcmFtZV9kaWcgMgppdG9iCmNvbmNhdApmcmFtZV9idXJ5IDAKYiBzZXR0bGVfOV9sMwpzZXR0bGVfOV9sMjoKZnJhbWVfZGlnIC0yCnR4bmFzIEFjY291bnRzCmNhbGxzdWIgcGF5b3V0XzEwCmZyYW1lX2RpZyAtMgp0eG5hcyBBY2NvdW50cwpieXRlY18zIC8vICJiZXQiCmFwcF9sb2NhbF9nZXQKaW50Y18yIC8vIDIKKgpmcmFtZV9idXJ5IDIKYnl0ZWMgOSAvLyAweDAwCmludGNfMCAvLyAwCmZyYW1lX2RpZyAxCnNldGJpdApmcmFtZV9kaWcgMgppdG9iCmNvbmNhdApmcmFtZV9idXJ5IDAKc2V0dGxlXzlfbDM6CmZyYW1lX2RpZyAtMgp0eG5hcyBBY2NvdW50cwpieXRlY18yIC8vICJjb21taXRtZW50X3JvdW5kIgphcHBfbG9jYWxfZGVsCmZyYW1lX2RpZyAtMgp0eG5hcyBBY2NvdW50cwpieXRlY18zIC8vICJiZXQiCmFwcF9sb2NhbF9kZWwKZnJhbWVfZGlnIC0yCnR4bmFzIEFjY291bnRzCmJ5dGVjIDcgLy8gImhlYWRzIgphcHBfbG9jYWxfZGVsCmJ5dGVjXzAgLy8gImJldHNfb3V0c3RhbmRpbmciCmJ5dGVjXzAgLy8gImJldHNfb3V0c3RhbmRpbmciCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCi0KYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBwYXlvdXQKcGF5b3V0XzEwOgpwcm90byAxIDAKaXR4bl9iZWdpbgppbnRjXzEgLy8gcGF5Cml0eG5fZmllbGQgVHlwZUVudW0KZnJhbWVfZGlnIC0xCml0eG5fZmllbGQgUmVjZWl2ZXIKZnJhbWVfZGlnIC0xCmJ5dGVjXzMgLy8gImJldCIKYXBwX2xvY2FsX2dldAppbnRjXzIgLy8gMgoqCml0eG5fZmllbGQgQW1vdW50Cml0eG5fc3VibWl0CnJldHN1YgoKLy8gZ2V0X3JhbmRvbW5lc3MKZ2V0cmFuZG9tbmVzc18xMToKcHJvdG8gMSAxCmludGNfMCAvLyAwCmJ5dGVjXzEgLy8gIiIKaW50Y18wIC8vIDAKZHVwCmJ5dGVjXzEgLy8gIiIKZHVwCmludGNfMCAvLyAwCmZyYW1lX2RpZyAtMQpmcmFtZV9idXJ5IDAKaW50Y18wIC8vIDAKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyA2Cml0b2IKZXh0cmFjdCA2IDAKYnl0ZWNfMSAvLyAiIgpjb25jYXQKZnJhbWVfYnVyeSAxCml0eG5fYmVnaW4KcHVzaGludCA2IC8vIGFwcGwKaXR4bl9maWVsZCBUeXBlRW51bQpieXRlYyA0IC8vICJiZWFjb25fYXBwX2lkIgphcHBfZ2xvYmFsX2dldAppdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKcHVzaGJ5dGVzIDB4NDdjMjBjMjMgLy8gIm11c3RfZ2V0KHVpbnQ2NCxieXRlW10pYnl0ZVtdIgppdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwpmcmFtZV9kaWcgMAppdG9iCml0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCmZyYW1lX2RpZyAxCml0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCml0eG5fc3VibWl0Cml0eG4gTGFzdExvZwpleHRyYWN0IDQgMApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBjb25maWd1cmUKY29uZmlndXJlXzEyOgpwcm90byAzIDAKdHhuIFNlbmRlcgpjYWxsc3ViIGF1dGhvbmx5XzEKLy8gdW5hdXRob3JpemVkCmFzc2VydApmcmFtZV9kaWcgLTIKZnJhbWVfZGlnIC0xCjwKLy8gbWluIGJldCBtdXN0IGJlIDwgbWF4IGJldAphc3NlcnQKYnl0ZWMgNCAvLyAiYmVhY29uX2FwcF9pZCIKZnJhbWVfZGlnIC0zCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDUgLy8gIm1pbl9iZXQiCmZyYW1lX2RpZyAtMgphcHBfZ2xvYmFsX3B1dApieXRlYyA2IC8vICJtYXhfYmV0IgpmcmFtZV9kaWcgLTEKYXBwX2dsb2JhbF9wdXQKcmV0c3Vi",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDEKYnl0ZWNibG9jayAweDYyNjU3NDczNWY2Zjc1NzQ3Mzc0NjE2ZTY0Njk2ZTY3CmNhbGxzdWIgY2xlYXJzdGF0ZV8wCmludGNfMCAvLyAxCnJldHVybgoKLy8gY2xlYXJfc3RhdGUKY2xlYXJzdGF0ZV8wOgpwcm90byAwIDAKdHhuIFNlbmRlcgpwdXNoYnl0ZXMgMHg2MzZmNmQ2ZDY5NzQ2ZDY1NmU3NDVmNzI2Zjc1NmU2NCAvLyAiY29tbWl0bWVudF9yb3VuZCIKYXBwX2xvY2FsX2dldApwdXNoaW50IDAgLy8gMAo+CmJ6IGNsZWFyc3RhdGVfMF9sMgpieXRlY18wIC8vICJiZXRzX291dHN0YW5kaW5nIgpieXRlY18wIC8vICJiZXRzX291dHN0YW5kaW5nIgphcHBfZ2xvYmFsX2dldAppbnRjXzAgLy8gMQotCmFwcF9nbG9iYWxfcHV0CmNsZWFyc3RhdGVfMF9sMjoKaW50Y18wIC8vIDEKcmV0dXJu"
    },
    "schema": {
        "local": {
            "declared": {
                "commitment_round": {
                    "type": "uint64",
                    "key": "commitment_round",
                    "descr": "The round this account committed to, to use for future randomness"
                },
                "bet": {
                    "type": "uint64",
                    "key": "bet",
                    "descr": "The amount of the bet, to be doubled on win"
                },
                "heads": {
                    "type": "uint64",
                    "key": "heads",
                    "descr": "The bet outcome, 0 for tails, >0 for heads"
                }
            },
            "reserved": {}
        },
        "global": {
            "declared": {
                "beacon_app_id": {
                    "type": "uint64",
                    "key": "beacon_app_id",
                    "descr": "The App ID of the randomness beacon. Should adhere to ARC-21"
                },
                "min_bet": {
                    "type": "uint64",
                    "key": "min_bet",
                    "descr": "The minimum bet for flipping a coin"
                },
                "max_bet": {
                    "type": "uint64",
                    "key": "max_bet",
                    "descr": "The maximum bet for flipping a coin"
                },
                "bets_outstanding": {
                    "type": "uint64",
                    "key": "bets_outstanding",
                    "descr": "Counter to keep track of how many bets are outstanding."
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "CoinFlipper",
        "methods": [
            {
                "name": "flip_coin",
                "args": [
                    {
                        "type": "pay",
                        "name": "bet_payment"
                    },
                    {
                        "type": "bool",
                        "name": "heads",
                        "desc": "boolean representing heads or tails"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "called to place a bet on the outcome of a coin flip"
            },
            {
                "name": "settle",
                "args": [
                    {
                        "type": "account",
                        "name": "bettor"
                    },
                    {
                        "type": "application",
                        "name": "beacon_app",
                        "desc": "App ref for random oracle beacon"
                    }
                ],
                "returns": {
                    "type": "(bool,uint64)",
                    "desc": "A string with the result of the bet"
                },
                "desc": "allows settlement of a bet placed during `flip_coin`"
            },
            {
                "name": "configure",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app_id",
                        "desc": "The uint64 app id of the beacon app to use"
                    },
                    {
                        "type": "uint64",
                        "name": "min_bet",
                        "desc": "The uint64 minimum bet allowed, specified in base algo units"
                    },
                    {
                        "type": "uint64",
                        "name": "max_bet",
                        "desc": "the uint64 maximum bet allowed, specified in base algo units"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows configuration of the application state values"
            }
        ],
        "networks": {},
        "desc": "\n    Allows user to flip a coin, choosing heads or tails and some future round to settle.\n\n    If the user guesses correctly, their bet is doubled and paid out to them.\n    "
    }
}